data_ij = cbind(df$ID[j], df$lat[j], df$long[j], df$FieldType[j], df$Location[j], df$SamplingYear[j], i, crop$category)
data_all = rbind(data_all, data_ij)
}}
years = c('2016','2017','2018','2019','2020','2021','2022')
data_all = c()
for (i in years){
for (j in 1:length(df$long)){
crop = GetCDLData(aoi = c(df$long[j],df$lat[j]), year = i, type = 'p', crs = '+init=epsg:4326')
data_ij = cbind(df$ID[j], df$lat[j], df$long[j], df$FieldType[j], df$Location[j], df$SamplingYear[j], i, crop$category)
data_all = rbind(data_all, data_ij)
}}
data_all
long = -118.6746
lat = 46.28371
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
}
}
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
print(d)
crop_dat(long, lat, years)
ojfalksd
return(d)}
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
}
return(d)}
crop_data(long, lat, years)
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_a = c(d_a,d)
}
return(d_a)}
crop_data(long, lat, years)
d_a = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_a = c(d_a,d)
}
return(d_a)}
crop_data(long, lat, years)
d_a = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_a = rbind(d_a,d)
}
return(d_a)}
crop_data(long, lat, years)
d_a = c()
y_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_a = rbind(d_a,d)
y_all = cbin(y_all, i)
}
return(list(d_a,y_all))}
crop_data(long, lat, years)
d_a = c()
y_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_a = rbind(d_a,d)
y_all = c(y_all, i)
}
return(list(d_a,y_all))}
crop_data(long, lat, years)
d_all
d_a
d_a
d_a
d_all = c()
y_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_all = rbind(d_all,d)
y_all = c(y_all, i)
}
return(list(d_a,y_all))}
d_a
crop_data(long, lat, years)
long = -118.6746
lat = 46.28371
d_all = c()
y_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_all = rbind(d_all,d)
y_all = c(y_all, i)
}
return(list(d_all,y_all))}
d_a
crop_data(long, lat, years)
d_all
crop_data(long, lat, years)
crop_data(long, lat, years)$d_all
d_all = rbind(d_all,d)
d_all
d_all = c()
y_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_all = rbind(d_all,d$category)
y_all = c(y_all, i)
}
return(list(d_all,y_all))}
d_all
crop_data(long, lat, years)$d_all
crop_data(long, lat, years)
d_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_all = rbind(d_all,d$category)
#y_all = c(y_all, i)
}
return(d_all,y_all)}
crop_data(long, lat, years)
d_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_all = rbind(d_all,d$category)
#y_all = c(y_all, i)
}
return(d_all)}
crop_data(long, lat, years)
a = crop_data(long, lat, years)
a
d_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_all = cbind(d_all,d$category)
#y_all = c(y_all, i)
}
return(d_all)}
a = crop_data(long, lat, years)
a
names(d_all)
d_all = c()
crop_data = function(long, lat, years){
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
d_all = cbind(d_all,d$category)
#y_all = c(y_all, i)
}
names(d_all) = years
return(d_all)}
a = crop_data(long, lat, years)
a
crop_data = function(long, lat, years){
crop_year = c()
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
crop_year = cbind(crop_year,d$category)
names(crop_year) = years
}
return(crop_year)}
a = crop_data(long, lat, years)
crop_data = function(long, lat, years){
crop_year = c()
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
crop_year = cbind(crop_year,d$category)
}
names(crop_year) = years
return(crop_year)}
a = crop_data(long, lat, years)
a
crop_data = function(long, lat, years){
crop_year = c()
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
crop_year = data.frame(cbind(crop_year,d$category))
}
names(crop_year) = years
return(crop_year)}
a = crop_data(long, lat, years)
a
View(a)
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
# make a function that returns the crop data for listed years for a given pin
crop_data = function(long, lat, years){
crop_year = c()
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326')
crop_year = data.frame(cbind(crop_year,d$category))
}
names(crop_year) = years
return(crop_year)}
#test
a = crop_data(-118.6746, 46.28371, years)
a
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
# make a function that returns the crop data for listed years for a given pin
crop_data = function(long, lat, years){
crop_year = c() #empty list
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326') #use CropScapeR to extract data
crop_year = data.frame(cbind(crop_year,d$category)) # append
}
names(crop_year) = years # rename the columns
return(crop_year)}
#test
crop_data(-118.6746, 46.28371, years)
for (j in 1:length(df$long)){
data = crop_data(long = df$long[j], lat = df$lat[j], years = years)
data_ij = cbind(df$ID[j], df$lat[j], df$long[j], df$FieldType[j], df$Location[j], df$SamplingYear[j], i, crop$category)
data_all = rbind(data_all, data_ij)
}
data
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
data_all = c()
for (j in 1:length(df$long)){
data = crop_data(long = df$long[j], lat = df$lat[j], years = years)
data_ij = cbind(df$ID[j], df$lat[j], df$long[j], df$FieldType[j], df$Location[j], df$SamplingYear[j], data)
data_all = rbind(data_all, data_ij)
}
data_all
z = data_all
# Load library
library("dplyr")
z
names(z)
my_dataframe <- z %>%
rename("df$ID[j]" = "ID",
"df$lat[j]" = "lat",
"df$long[j]" = "long",
"df$FieldType[j]" = "FieldType",
"df$Location[j]" = "Location",
"df$SamplingYear[j]" = "SamplingYear")
# Rename multiple columns
my_dataframe <- z %>%
dplyr::rename("df$ID[j]" = "ID",
"df$lat[j]" = "lat",
"df$long[j]" = "long",
"df$FieldType[j]" = "FieldType",
"df$Location[j]" = "Location",
"df$SamplingYear[j]" = "SamplingYear")
print(my_dataframe)
my_dataframe <- z %>% dplyr::rename("df$ID[j]" = "ID",
"df$lat[j]" = "lat",
"df$long[j]" = "long",
"df$FieldType[j]" = "FieldType",
"df$Location[j]" = "Location",
"df$SamplingYear[j]" = "SamplingYear")
names(z)
unlist(names(z))
# Rename multiple columns
c("ID","lat", "long", "FieldType", "Location", "SamplingYear",'2016','2017','2018','2019','2020','2021','2022')
# Rename columns
names(data_all) = c("ID","lat", "long", "FieldType", "Location", "SamplingYear",'2016','2017','2018','2019','2020','2021','2022')
head(data_all)
names(data_all) = c("FieldID","lat", "long", "FieldType", "Location", "SamplingYear",'2016','2017','2018','2019','2020','2021','2022')
head(data_all)
dim(data_all)
dim(data_all)
head(data_all)
write.csv("crop_rotation.csv", data_all)
write.csv(data_all, "crop_rotation.csv")
# define a function that returns the crop data for listed years for a given pin
crop_data = function(long, lat, years){
crop_year = c() #empty list
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326') #use CropScapeR to extract data
crop_year = data.frame(cbind(crop_year,d$category)) # append
}
names(crop_year) = years # rename the columns
return(crop_year)}
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022', '2023')
#test test
crop_data(-118.6746, 46.28371, years)
#test test
crop_data(-118.6746, 46.28371, years)
knitr::opts_chunk$set(echo = TRUE)
df = read.csv('C:/Users/theox/Desktop/Summer Projects/SoilFingerPrints/Data/SamplingLocations/SamplingLocations.csv',
fileEncoding="latin1")
df = df[c('ID', 'lat', 'long', 'FieldType', 'Location','SamplingYear')]
head(df)
df$FieldType = gsub('Field', "", df$FieldType)
df$FieldType = gsub('field', "", df$FieldType)
df$FieldType = gsub('Non-virgin ', "Non-virgin", df$FieldType)
df$FieldType = gsub('Virgin ', "Virgin", df$FieldType)
unique(df$FieldType)
# define a function that returns the crop data for listed years for a given pin
crop_data = function(long, lat, years){
crop_year = c() #empty list
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326') #use CropScapeR to extract data
crop_year = data.frame(cbind(crop_year,d$category)) # append
}
names(crop_year) = years # rename the columns
return(crop_year)}
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
#test test
crop_data(-118.6746, 46.28371, years)
library("CropScapeR")
# define a function that returns the crop data for listed years for a given pin
crop_data = function(long, lat, years){
crop_year = c() #empty list
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326') #use CropScapeR to extract data
crop_year = data.frame(cbind(crop_year,d$category)) # append
}
names(crop_year) = years # rename the columns
return(crop_year)}
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
#test test
crop_data(-118.6746, 46.28371, years)
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
data_all = c()
# extract data for all fields
for (j in 1:length(df$long)){
data = crop_data(long = df$long[j], lat = df$lat[j], years = years)
data_ij = cbind(df$ID[j], df$lat[j], df$long[j], df$FieldType[j], df$Location[j], df$SamplingYear[j], data)
data_all = rbind(data_all, data_ij)
}
# Rename columns
names(data_all) = c("FieldID","lat", "long", "FieldType", "Location", "SamplingYear",'2016','2017','2018','2019','2020','2021','2022')
dim(data_all)
head(data_all)
#write.csv(data_all, "crop_rotation.csv")
df[,j]
j
df[,j]
df[j,]
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
data_all = c()
# extract data for all fields
for (j in 1:length(df$long)){
data = crop_data(long = df$long[j], lat = df$lat[j], years = years)
data_ij = cbind(df[j,], data)
data_all = rbind(data_all, data_ij)
}
head(data_all)
dim(data_all)
head(data_all)
write.csv(data_all, "crop_rotation.csv")
knitr::opts_chunk$set(echo = TRUE)
library("CropScapeR")
df = read.csv('C:/Users/theox/Desktop/Summer Projects/SoilFingerPrints/Data/SamplingLocations/SamplingLocations.csv',
fileEncoding="latin1")
df = df[c('ID', 'lat', 'long', 'FieldType', 'Location','SamplingYear')]
head(df)
df$FieldType = gsub('Field', "", df$FieldType)
df$FieldType = gsub('field', "", df$FieldType)
df$FieldType = gsub('Non-virgin ', "Non-virgin", df$FieldType)
df$FieldType = gsub('Virgin ', "Virgin", df$FieldType)
unique(df$FieldType)
# define a function that returns the crop data for listed years for a given pin
crop_data = function(long, lat, years){
crop_year = c() #empty list
for(i in years){
d = GetCDLData(aoi = c(long, lat), year = i, type = 'p', crs = '+init=epsg:4326') #use CropScapeR to extract data
crop_year = data.frame(cbind(crop_year,d$category)) # append
}
names(crop_year) = years # rename the columns
return(crop_year)}
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
#test test
crop_data(-118.6746, 46.28371, years)
# list of dates that we need data from
years = c('2016','2017','2018','2019','2020','2021','2022')
data_all = c()
# extract data for all fields
for (j in 1:length(df$long)){
data = crop_data(long = df$long[j], lat = df$lat[j], years = years)
data_ij = cbind(df[j,], data)
data_all = rbind(data_all, data_ij)
}
dim(data_all)
head(data_all)
write.csv(data_all, "crop_rotation.csv")
library(AOI)
library(climateR)
library(dplyr)
library(sf)
# write as a function for yearly average:
envn_var = c("sph","vpd","pr", "rmin","rmax","srad",
"tmmn","tmmx","vs","th","pdsi","pet","etr","fm100","fm1000")#varialbes you want to extract
env_data_yearly= function(long, lat){
ts = data.frame(lng  = long, lat = lat) %>%
sf::st_as_sf(coords = c('lng', 'lat'), crs = 4326) %>%
getGridMET(varname =  envn_var,
startDate = "2013-01-01",
endDate = "2022-06-30") #package climateR
ts$year = format(as.Date(ts$date), "%Y") #format the date column
ts%>% group_by(year)
df2<- ts[, c("year", "pr","vpd", "rmin", "rmax", "srad", "tmmn", "tmmx", "vs", "th",
"pdsi.x", "pdsi.y","pet", "etr", "fm100","fm1000")]
agg_tbl <- df2 %>% group_by(year) %>%
summarise(across(everything(), .f = list(mean = mean), na.rm = TRUE)) #summarize
return(data.frame(agg_tbl))
}
env_data_10yr= function(long, lat){
ts = data.frame(lng  = long, lat = lat) %>%
sf::st_as_sf(coords = c('lng', 'lat'), crs = 4326) %>%
getGridMET(varname =  envn_var,
startDate = "2013-01-01",
endDate = "2022-06-30")
df2<- ts[, c("pr","vpd","rmin", "rmax", "srad", "tmmn", "tmmx", "vs", "th",
"pdsi.x", "pdsi.y","pet", "etr", "fm100","fm1000")]
agg_tbl <- df2 %>%
summarise(across(everything(), .f = list(mean = mean), na.rm = TRUE))
return(data.frame(agg_tbl))
}
df = read.csv('C:/Users/theox/Desktop/Summer Projects/SoilFingerPrints/Data/SamplingLocations/SamplingLocations.csv',
fileEncoding="latin1")
df = df[c('ID', 'lat', 'long', 'FieldType', 'Location','SamplingYear')]
head(df)
df$FieldType = gsub('Field', "", df$FieldType)
df$FieldType = gsub('field', "", df$FieldType)
df$FieldType = gsub('Non-virgin ', "Non-virgin", df$FieldType)
df$FieldType = gsub('Virgin ', "Virgin", df$FieldType)
unique(df$FieldType)
# write as a function for yearly average:
envn_var = c("sph","vpd","pr", "rmin","rmax","srad",
"tmmn","tmmx","vs","th","pdsi","pet","etr","fm100","fm1000")#varialbes you want to extract
env_data_yearly= function(long, lat){
ts = data.frame(lng  = long, lat = lat) %>%
sf::st_as_sf(coords = c('lng', 'lat'), crs = 4326) %>%
getGridMET(varname =  envn_var,
startDate = "2013-01-01",
endDate = "2022-06-30") #package climateR
ts$year = format(as.Date(ts$date), "%Y") #format the date column
ts%>% group_by(year)
df2<- ts[, c("year", "pr","vpd", "rmin", "rmax", "srad", "tmmn", "tmmx", "vs", "th",
"pdsi.x", "pdsi.y","pet", "etr", "fm100","fm1000")]
agg_tbl <- df2 %>% group_by(year) %>%
summarise(across(everything(), .f = list(mean = mean), na.rm = TRUE)) #summarize
return(data.frame(agg_tbl))
}
# long term averages 10 year average
envn_var = c("sph","vpd","pr", "rmin","rmax","srad",
"tmmn","tmmx","vs","th","pdsi","pet","etr","fm100","fm1000")
env_data_10yr= function(long, lat){
ts = data.frame(lng  = long, lat = lat) %>%
sf::st_as_sf(coords = c('lng', 'lat'), crs = 4326) %>%
getGridMET(varname =  envn_var,
startDate = "2013-01-01",
endDate = "2022-06-30")
df2<- ts[, c("pr","vpd","rmin", "rmax", "srad", "tmmn", "tmmx", "vs", "th",
"pdsi.x", "pdsi.y","pet", "etr", "fm100","fm1000")]
agg_tbl <- df2 %>%
summarise(across(everything(), .f = list(mean = mean), na.rm = TRUE))
return(data.frame(agg_tbl))
}
#read data
df = read.csv('C:/Users/theox/Desktop/Summer Projects/SoilFingerPrints/Data/SamplingLocations/SamplingLocations.csv',
fileEncoding="latin1")
df = df[c('ID', 'lat', 'long', 'FieldType', 'Location','SamplingYear')]
head(df)
df$FieldType = gsub('Field', "", df$FieldType)
df$FieldType = gsub('field', "", df$FieldType)
df$FieldType = gsub('Non-virgin ', "Non-virgin", df$FieldType)
df$FieldType = gsub('Virgin ', "Virgin", df$FieldType)
unique(df$FieldType)
#extract 10 year average data from all pins:
data_all_overall = c()
for (i in 1:length(df$long)){
data = env_data_10yr(long = df$long[i], lat = df$lat[i])
data_ij = cbind(df[i,], data)
data_all_overall = rbind(data_all_overall, data_ij)
}
col_name = c("location", "latitude", "longitude", "precipitation_mean", "mean_vapor_pressure_deficit_mean",
"minimum_near_surface_relative_humidity_mean", "maximum_near_surface_relative_humidity_mean",
"surface_downwelling_solar_radiation_mean","minimum_near_surface_air_temperature_mean",
"maximum_near_surface_air_temperature_mean", "wind_speed_at_10m_mean", "wind_direcation_at_10m_mean",
"palmer_drought_severity_index_x_mean", "palmer_drought_severity_index_y_mean",
"reference_grass_evapotranspiration_mean", "reference_alfaalfa_evapotranspiration_mean",
"dead_fuel_moisture_100hour_mean" , "dead_fuel_moisture_1000hour_mean")
names(data_all_overall) = col_name
write.csv(data_all_overall, "10yr_avg_environmental_data_potato.csv")
#extract yearly average data from all pins:
data_all_yearly = c()
for (i in 1:length(df$lat)){
data = env_data_yearly(long = df$long[i], lat = df$lat[i])
data_ij = cbind(df[i,], data)
data_all_yearly = rbind(data_all_yearly, data_ij)
}
col_name = c("location", "latitude", "longitude", "year", "precipitation_mean", "mean_vapor_pressure_deficit_mean",
"minimum_near_surface_relative_humidity_mean", "maximum_near_surface_relative_humidity_mean",
"surface_downwelling_solar_radiation_mean","minimum_near_surface_air_temperature_mean",
"maximum_near_surface_air_temperature_mean", "wind_speed_at_10m_mean", "wind_direcation_at_10m_mean",
"palmer_drought_severity_index_x_mean", "palmer_drought_severity_index_y_mean",
"reference_grass_evapotranspiration_mean", "reference_alfaalfa_evapotranspiration_mean",
"dead_fuel_moisture_100hour_mean" , "dead_fuel_moisture_1000hour_mean")
names(data_all_yearly) = col_name
names(data_all_yearly)
write.csv(data_all_yearly, "yearly_environmental_data_potato.csv")
gc()
gc()
